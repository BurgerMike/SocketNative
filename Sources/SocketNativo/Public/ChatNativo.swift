import Foundation
import Observation
@MainActor @Observable public final class ChatNativo { public private(set) var conectado = false ; private var miIdUsuario=0; private var idGrupoActual=0; private var bridged:Set<String>=[]; private var listeners:[String:[UUID:([Any])->Void]] = [:]; private var anyListeners:[UUID:(String,[Any])->Void]=[:]; public init(){} ; public func conectar(_ cfg:ConfiguracionSocket, namespace:String = "/messages", idUsuario:Int, idGrupo:Int) async { miIdUsuario = idUsuario; idGrupoActual = idGrupo; conectado = true } ; public func enviar(_ t:String) async {} ; public func marcarComoLeido(timeout: TimeInterval = 10) async {} ; public func cerrarChat(resuelto: Bool = true) async {} ; public func escribiendo(_ activo: Bool) async {} ; public func entradaEditada() {} ; @discardableResult public func escuchar(_ e:String, usando b:@escaping([Any])->Void)->UUID{ let id=UUID(); if listeners[e]==nil{listeners[e]=[:]} ; listeners[e]![id]=b ; return id } ; public func quitarEscucha(_ e:String, id:UUID){ listeners[e]?[id]=nil } ; @discardableResult public func enCualquierEvento(usando b:@escaping(String,[Any])->Void)->UUID{ let id=UUID(); anyListeners[id]=b; return id } ; public func quitarEscuchaAny(id:UUID){ anyListeners[id]=nil } }
